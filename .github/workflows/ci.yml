name: ci

on: [
  push,
  pull_request
]

jobs:
  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Set Cache Key
      run: echo "::set-env name=PY::$(python --version --version | sha256sum | cut -d' ' -f1)"
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - uses: pre-commit/action@v1.0.1

  lint:
    runs-on: ubuntu-latest
    needs: pre-commit

    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox-py2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Lint Requirements
      run: |
        nox --force-color -e lint --install-only

    - name: Run Lint
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e lint

  docs:
    runs-on: ubuntu-latest
    needs: pre-commit

    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox-py2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Doc Requirements
      run: |
        nox --force-color -e 'docs(compress=True, update=False)' --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e 'docs(compress=True, update=False)'

    - uses: actions/upload-artifact@v1
      with:
        name: docs-html
        path: doc/html-archive.tar.xz

    - uses: actions/upload-artifact@v1
      with:
        name: docs-man
        path: doc/man-archive.tar.xz


  debian-10:
    name: Debian 10
    runs-on: ubuntu-latest
    #needs: pre-commit

    timeout-minutes: 1800

    steps:
    - uses: actions/checkout@v2

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6

    - name: Set Env Keys
      run: |
        echo "::set-env name=RUBY::$(ruby --version | sha256sum | cut -d' ' -f1)"
        echo "::set-env name=BUNDLE_WITH::docker"
        echo "::set-env name=BUNDLE_WITHOUT::ec2 vagrant windows"

    - name: Set Cache Key
      run: |
        echo "RUBY=${{ env.RUBY }}"
        echo "BUNDLE_WITH=${{ env.BUNDLE_WITH }}"
        echo "BUNDLE_WITHOUT=${{ env.BUNDLE_WITHOUT }}"
        echo "::set-env name=BUNDLE_CACHE_KEY::$(echo ${{ env.RUBY }} ${{ env.BUNDLE_WITH }} ${{ env.BUNDLE_WITHOUT }} | sha256sum | cut -d' ' -f1)"

    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: bundle-use-ruby-${{ runner.os }}-${{ env.BUNDLE_CACHE_KEY }}-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          bundle-use-ruby-${{ runner.os }}-${{ env.BUNDLE_CACHE_KEY }}-

    - name: bundle install
      run: |
        bundle config path vendor/bundle
        bundle config set with ${{ env.BUNDLE_WITH }}
        bundle config set without ${{ env.BUNDLE_WITHOUT }}
        bundle install --jobs 4 --retry 3

    - name: Run Tests
      env:
        NOX_PASSTHROUGH_OPTS: '--ssh-tests'
        SALT_DOCKER_IMAGE: 'saltstack/ci-debian-10'
      run: |
        ssh-keygen -t rsa -b 4096 -C "Test Kitchen Key" -f ~/.ssh/id_rsa -q -N ""
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        bundle exec kitchen verify --debug py3-debian-10

    - uses: actions/upload-artifact@v1
      with:
        name: artifacts
        path: artifacts/
